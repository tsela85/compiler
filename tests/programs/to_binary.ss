(define (find-binary-val num)
  (define (pow num power)
    (cond 
      ((= power 0) 1)
      ((= power 1) num)
      ((even? power)
       (let ((val (pow num (/ power 2))))
         (* val val)))
      ((odd? power)
       (let ((val (pow num (/ (- power 1) 2))))
         (* num val val)))))
  (define (find-largest-bit num)
    (define (find-largest-bit-iter count num)
      (if (< num (pow 2 count))
          (- count 1)
          (find-largest-bit-iter (+ count 1) num)))
    (find-largest-bit-iter 0 num))
  (define (build count num)
    (if (= count -1)
        '()
        (let ((val (pow 2 count)))
          (if (<= val num)
              (cons 1 (build (- count 1) (- num val)))
              (cons 0 (build (- count 1) num))))))
  (define (to-string ls)
    (define (to-string-helper num)
      (integer->char (+ num 48)))
    (list->string (map to-string-helper ls)))
  (to-string (build (find-largest-bit num) num)))

(string-append (find-binary-val 3452) " " (find-binary-val 432))