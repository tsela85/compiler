(define fact
  (let ((s (lambda (x) (lambda (y) (lambda (z) ((x z) (y z))))))
	(k (lambda (x) (lambda (y) x)))
	(->
	 (letrec ((-> (lambda (n)
			(if (zero? n) (lambda (x) (lambda (y) y))
			    (let ((z (-> (- n 1))))
			      (lambda (x)
				(lambda (y)
				  (x ((z x) y)))))))))
	   ->)))
    (lambda (n)
      (((((((s ((s (k s)) ((s (k k)) s))) (k k))
	   ((((s ((s (k s)) ((s (k k)) s))) (k k))
	     ((((s ((s (k s)) ((s (k k)) s))) (k k)) ((s k) k))
	      ((s ((((s (k s)) k)
		    ((s (k ((s ((s (k s)) ((s (k k)) s))) (k k))))
		     (((s ((s (k s)) ((s (k k)) s))) (k k)) ((s k) k))))
		   ((((s (k s)) k) (s ((s (k s)) k)))
		    ((((s ((s (k s)) ((s (k k)) s))) (k k)) ((s k) k)) k))))
	       ((s ((((s (k s)) k) 
		     ((s (k s)) k))
		    ((((s ((s (k s)) 
			   ((s (k k)) s))) (k k))
		      ((s k) k)) k)))
		((((s ((s (k s)) ((s (k k)) s)))
		   (k k)) ((s k) k)) (k ((s k) k)))))))
	    ((((s (k ((s ((s (k s)) ((s (k k)) s))) (k k))))
	       (((s ((s (k s)) ((s (k k)) s))) (k k)) ((s k) k)))
	      ((s ((s (k s)) k)) (k ((s k) k))))
	     ((s ((s (k s)) k)) (k ((s k) k))))))
	  (k ((s k) k)))
	 (-> n))
	(lambda (x) (+ x 1))) 0))))
(apply fact (list (car (map (lambda (x) (+ x 2)) (list 3)))))