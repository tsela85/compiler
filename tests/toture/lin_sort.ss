(define (linear-sort ls)
  (define (find-max-val ls)
    (+ 1 (apply max ls)))
  (define (init size)
    (define (init-iter index size vec)
      (if (= index size)
          vec
          (begin
            (vector-set! vec index 0)
            (init-iter (+ index 1) size vec))))    
    (init-iter 0 size (make-vector size)))
  (define (do-count ls vec)
    (if (null? ls)
        vec
        (let* ((index (car ls))
               (count (vector-ref vec index)))
          (begin
            (vector-set! vec index (+ count 1))
            (do-count (cdr ls) vec)))))
  (define (build-sorted-ls ls)
    (define (build-sorted-ls ls count)
      (if (null? ls)
          '()
          (append
            (build-helper count (car ls))
            (build-sorted-ls (cdr ls) (+ count 1)))))
    (define (build-helper val count)
      (if (= count 0)
          '()
          (cons val (build-helper val (- count 1)))))
    (build-sorted-ls ls 0))
  (let ((vec (init (find-max-val ls))))
    (do-count ls vec)      
    (build-sorted-ls (vector->list vec))))
(linear-sort '(5 3 7 2 3 5 7 3 2 2 0 6 4 6 10 10 8 5 0 10 4 4 2 0 10))